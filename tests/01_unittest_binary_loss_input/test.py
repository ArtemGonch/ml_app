import numpy as np
from solution import *
from common import assert_ndarray_equal

def test_loss_1():
    model = BinaryEstimatorSVM(C=1.0,
                            fit_intercept=True)
    
    model.coef_ = np.array([[-1.31980307], [ 0.33426974]])
    model.intercept_ = 2.3

    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142, ]
                , [-0.00422831, -2.0688571, ]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786, ]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
    
    y = np.array([-1., -1., -1., -1., -1., -1., 1., -1., -1., -1., -1., -1., 1., -1., -1., -1., 1., -1., -1.])
    
    correct = np.array(4.075153)
    
    actual = model.loss(X, y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 1 Failed")


def test_loss_2():
    model = BinaryEstimatorSVM(C=0.007,
                            fit_intercept=True)
    
    model.coef_ = np.array([[-1.31980307], [ 0.33426974]])
    model.intercept_ = 2.3

    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142, ]
                , [-0.00422831, -2.0688571, ]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786, ]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
    
    y = np.array([-1., -1., -1., -1., -1., -1., 1., -1., -1., -1., -1., -1., 1., -1., -1., -1., 1., -1., -1.])
    
    correct = np.array(3.154833)
    
    actual = model.loss(X, y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 2 Failed")


def test_loss_3():
    model = BinaryEstimatorSVM(C=0.0,
                            fit_intercept=True)
    
    model.coef_ = np.array([[-1.31980307], [ 0.33426974]])
    model.intercept_ = 2.3

    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142, ]
                , [-0.00422831, -2.0688571, ]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786, ]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
    
    y = np.array([-1., -1., -1., -1., -1., -1., 1., -1., -1., -1., -1., -1., 1., -1., -1., -1., 1., -1., -1.])
    
    correct = np.array(3.148345)
    
    actual = model.loss(X, y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 3 Failed")


def test_loss_4():
    model = BinaryEstimatorSVM(C=0.007,
                            fit_intercept=False)
    
    model.coef_ = np.array([[-1.31980307], [ 0.33426974]])

    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142, ]
                , [-0.00422831, -2.0688571, ]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786, ]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
    
    y = np.array([-1., -1., -1., -1., -1., -1., 1., -1., -1., -1., -1., -1., 1., -1., -1., -1., 1., -1., -1.])
    
    correct = np.array(1.260179)
    
    actual = model.loss(X, y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 4 Failed")


def test_loss_5():
    model = BinaryEstimatorSVM(C=0.0,
                            fit_intercept=False)
    
    model.coef_ = np.array([[-1.31980307], [ 0.33426974]])

    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142, ]
                , [-0.00422831, -2.0688571, ]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786, ]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
    
    y = np.array([-1., -1., -1., -1., -1., -1., 1., -1., -1., -1., -1., -1., 1., -1., -1., -1., 1., -1., -1.])
    
    correct = np.array(1.253691)
    
    actual = model.loss(X, y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 5 Failed")