import numpy as np
from solution import one_vs_rest
from common import assert_ndarray_equal

def test_one_vs_rest_1():
    y = np.array([3, 5, 4, 2, 3, 4, 2, 5, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1, 4, 4, 3, 5, 0, 4, 1])
    
    correct = np.array([[-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., 1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., 1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., 1., -1., -1., -1., -1.]])
    
    actual = one_vs_rest(y, n_classes=6)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 1 Failed")


def test_one_vs_rest_2():
    y = np.array([3, 4, 2, 3, 4, 2, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1, 4, 4, 3, 0, 4, 1])
    
    correct = np.array([[-1., -1., -1., 1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., 1., -1., -1.]
                        , [-1., -1., -1., 1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., 1., -1., -1.]
                        , [-1., -1., 1., -1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., 1., -1., -1.]
                        , [1., -1., -1., -1., -1.]
                        , [-1., -1., 1., -1., -1.]
                        , [1., -1., -1., -1., -1.]
                        , [-1., 1., -1., -1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., -1., 1., -1.]
                        , [-1., 1., -1., -1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., -1., -1., 1., -1.]
                        , [1., -1., -1., -1., -1.]
                        , [-1., -1., -1., -1., 1.]
                        , [-1., 1., -1., -1., -1.]])
    
    actual = one_vs_rest(y, n_classes=5)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 2 Failed")


def test_one_vs_rest_3():
    y = np.array([3, 5, 4, 2, 3, 4, 2, 5, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1, 4, 4, 3, 5, 0, 4, 1])
    
    correct = np.array([[-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., -1., 1., -1., -1., -1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., 1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., 1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., -1., -1., 1., -1., -1.]
                , [-1., -1., -1., -1., -1., 1.]
                , [1., -1., -1., -1., -1., -1.]
                , [-1., -1., -1., -1., 1., -1.]
                , [-1., 1., -1., -1., -1., -1.]])
    
    actual = one_vs_rest(y)
    assert_ndarray_equal(actual=actual, correct=correct,  err_msg="Test 3 Failed")