import numpy as np
from solution import one_vs_one
from common import assert_ndarray_equal

def test_one_vs_one_1():
    X = np.array([[-1.27599669, 0.83473676]
                , [0.834732, 0.40096667]
                , [0.71524899, 0.94828181]
                , [-1.36385697, 1.08768775]
                , [-1.44876697, 0.79743398]
                , [0.5275475, 0.50570868]
                , [-1.15731421, -0.67281411]
                , [-1.41285223, 0.72616832]
                , [-1.26116455, 1.0807142]
                , [-0.00422831, -2.0688571]
                , [0.59346072, 0.58952085]
                , [-0.01037196, -1.78490712]
                , [-1.27959017, -0.64675803]
                , [-1.20396896, 0.5540786]
                , [0.99893463, 0.19640479]
                , [1.2213383, 0.18877463]
                , [-1.23188415, -0.68323095]
                , [0.1109394, -1.69829392]
                , [-1.41501468, 1.28928821]])
        
    y = np.array([3, 5, 4, 2, 3, 4, 2, 5, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1])
    
    correct = [(np.array([[-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([ 1,  1, -1, -1]), 0, 1), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.27959017, -0.64675803],
       [-1.20396896,  0.5540786 ],
       [ 0.99893463,  0.19640479]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 0, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 0.1109394 , -1.69829392]]), np.array([-1, -1,  1,  1, -1]), 0, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [-1.23188415, -0.68323095]]), np.array([-1, -1, -1, -1,  1,  1, -1]), 0, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.41285223,  0.72616832],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479]]), np.array([-1, -1,  1,  1]), 0, 5), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1, -1,  1,  1]), 1, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [ 1.2213383 ,  0.18877463],
       [ 0.1109394 , -1.69829392],
       [-1.41501468,  1.28928821]]), np.array([-1, -1,  1, -1,  1]), 1, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [ 1.2213383 ,  0.18877463],
       [-1.23188415, -0.68323095],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 1, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.41285223,  0.72616832],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([-1, -1,  1,  1]), 1, 5), (np.array([[-1.27599669,  0.83473676],
       [-1.36385697,  1.08768775],
       [-1.44876697,  0.79743398],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 0.1109394 , -1.69829392]]), np.array([-1,  1, -1,  1,  1,  1,  1, -1]), 2, 3), (np.array([[ 0.71524899,  0.94828181],
       [-1.36385697,  1.08768775],
       [ 0.5275475 ,  0.50570868],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [-1.23188415, -0.68323095]]), np.array([-1,  1, -1,  1,  1, -1, -1,  1,  1, -1]), 2, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.41285223,  0.72616832],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ]]), np.array([-1,  1,  1, -1,  1,  1,  1]), 2, 5), (np.array([[-1.27599669,  0.83473676],
       [ 0.71524899,  0.94828181],
       [-1.44876697,  0.79743398],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.23188415, -0.68323095],
       [ 0.1109394 , -1.69829392]]), np.array([ 1, -1,  1, -1, -1, -1, -1,  1]), 3, 4), (np.array([[-1.27599669,  0.83473676],
       [ 0.834732  ,  0.40096667],
       [-1.44876697,  0.79743398],
       [-1.41285223,  0.72616832],
       [ 0.1109394 , -1.69829392]]), np.array([ 1, -1,  1, -1,  1]), 3, 5), (np.array([[ 0.834732  ,  0.40096667],
       [ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-1.41285223,  0.72616832],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.23188415, -0.68323095]]), np.array([-1,  1,  1, -1,  1,  1,  1]), 4, 5)]
    
    actual = one_vs_one(X, y, n_classes=6)

    for i in range(len(correct)):
        assert_ndarray_equal(actual=actual[i][0], correct=correct[i][0],  err_msg="Test 1 Failed")
        assert_ndarray_equal(actual=actual[i][1], correct=correct[i][1],  err_msg="Test 1 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][2]), correct=np.array(correct[i][2]),  err_msg="Test 1 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][3]), correct=np.array(correct[i][3]),  err_msg="Test 1 Failed")



def test_one_vs_one_2():
    X = np.array([[-1.27599669, 0.83473676]
            , [0.834732, 0.40096667]
            , [0.71524899, 0.94828181]
            , [-1.36385697, 1.08768775]
            , [-1.44876697, 0.79743398]
            , [0.5275475, 0.50570868]
            , [-1.15731421, -0.67281411]
            , [-1.41285223, 0.72616832]
            , [-1.26116455, 1.0807142]
            , [-0.00422831, -2.0688571]
            , [0.59346072, 0.58952085]
            , [-0.01037196, -1.78490712]
            , [-1.27959017, -0.64675803]
            , [-1.20396896, 0.5540786]
            , [0.99893463, 0.19640479]
            , [1.2213383, 0.18877463]
            , [-1.23188415, -0.68323095]
            , [0.1109394, -1.69829392]
            , [-1.41501468, 1.28928821]])
        
    y = np.array([3, 5, 4, 2, 3, 4, 2, 5, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1])
    
    correct = [(np.array([[-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([ 1,  1, -1, -1]), 0, 1), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.27959017, -0.64675803],
       [-1.20396896,  0.5540786 ],
       [ 0.99893463,  0.19640479]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 0, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 0.1109394 , -1.69829392]]), np.array([-1, -1,  1,  1, -1]), 0, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [-1.23188415, -0.68323095]]), np.array([-1, -1, -1, -1,  1,  1, -1]), 0, 4), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1, -1,  1,  1]), 1, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [ 1.2213383 ,  0.18877463],
       [ 0.1109394 , -1.69829392],
       [-1.41501468,  1.28928821]]), np.array([-1, -1,  1, -1,  1]), 1, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [ 1.2213383 ,  0.18877463],
       [-1.23188415, -0.68323095],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 1, 4), (np.array([[-1.27599669,  0.83473676],
       [-1.36385697,  1.08768775],
       [-1.44876697,  0.79743398],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 0.1109394 , -1.69829392]]), np.array([-1,  1, -1,  1,  1,  1,  1, -1]), 2, 3), (np.array([[ 0.71524899,  0.94828181],
       [-1.36385697,  1.08768775],
       [ 0.5275475 ,  0.50570868],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [-1.23188415, -0.68323095]]), np.array([-1,  1, -1,  1,  1, -1, -1,  1,  1, -1]), 2, 4), (np.array([[-1.27599669,  0.83473676],
       [ 0.71524899,  0.94828181],
       [-1.44876697,  0.79743398],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.23188415, -0.68323095],
       [ 0.1109394 , -1.69829392]]), np.array([ 1, -1,  1, -1, -1, -1, -1,  1]), 3, 4)]
    
    actual = one_vs_one(X, y, n_classes=5)

    for i in range(len(correct)):
        assert_ndarray_equal(actual=actual[i][0], correct=correct[i][0],  err_msg="Test 2 Failed")
        assert_ndarray_equal(actual=actual[i][1], correct=correct[i][1],  err_msg="Test 2 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][2]), correct=np.array(correct[i][2]),  err_msg="Test 2 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][3]), correct=np.array(correct[i][3]),  err_msg="Test 2 Failed")


def test_one_vs_one_3():
    X = np.array([[-1.27599669, 0.83473676]
            , [0.834732, 0.40096667]
            , [0.71524899, 0.94828181]
            , [-1.36385697, 1.08768775]
            , [-1.44876697, 0.79743398]
            , [0.5275475, 0.50570868]
            , [-1.15731421, -0.67281411]
            , [-1.41285223, 0.72616832]
            , [-1.26116455, 1.0807142]
            , [-0.00422831, -2.0688571]
            , [0.59346072, 0.58952085]
            , [-0.01037196, -1.78490712]
            , [-1.27959017, -0.64675803]
            , [-1.20396896, 0.5540786]
            , [0.99893463, 0.19640479]
            , [1.2213383, 0.18877463]
            , [-1.23188415, -0.68323095]
            , [0.1109394, -1.69829392]
            , [-1.41501468, 1.28928821]])
        
    y = np.array([3, 5, 4, 2, 3, 4, 2, 5, 2, 4, 4, 2, 0, 2, 0, 1, 4, 3, 1])
    
    correct = [(np.array([[-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([ 1,  1, -1, -1]), 0, 1), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.27959017, -0.64675803],
       [-1.20396896,  0.5540786 ],
       [ 0.99893463,  0.19640479]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 0, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [ 0.1109394 , -1.69829392]]), np.array([-1, -1,  1,  1, -1]), 0, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479],
       [-1.23188415, -0.68323095]]), np.array([-1, -1, -1, -1,  1,  1, -1]), 0, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.41285223,  0.72616832],
       [-1.27959017, -0.64675803],
       [ 0.99893463,  0.19640479]]), np.array([-1, -1,  1,  1]), 0, 5), (np.array([[-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1, -1,  1,  1]), 1, 2), (np.array([[-1.27599669,  0.83473676],
       [-1.44876697,  0.79743398],
       [ 1.2213383 ,  0.18877463],
       [ 0.1109394 , -1.69829392],
       [-1.41501468,  1.28928821]]), np.array([-1, -1,  1, -1,  1]), 1, 3), (np.array([[ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [ 1.2213383 ,  0.18877463],
       [-1.23188415, -0.68323095],
       [-1.41501468,  1.28928821]]), np.array([-1, -1, -1, -1,  1, -1,  1]), 1, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.41285223,  0.72616832],
       [ 1.2213383 ,  0.18877463],
       [-1.41501468,  1.28928821]]), np.array([-1, -1,  1,  1]), 1, 5), (np.array([[-1.27599669,  0.83473676],
       [-1.36385697,  1.08768775],
       [-1.44876697,  0.79743398],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [ 0.1109394 , -1.69829392]]), np.array([-1,  1, -1,  1,  1,  1,  1, -1]), 2, 3), (np.array([[ 0.71524899,  0.94828181],
       [-1.36385697,  1.08768775],
       [ 0.5275475 ,  0.50570868],
       [-1.15731421, -0.67281411],
       [-1.26116455,  1.0807142 ],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ],
       [-1.23188415, -0.68323095]]), np.array([-1,  1, -1,  1,  1, -1, -1,  1,  1, -1]), 2, 4), (np.array([[ 0.834732  ,  0.40096667],
       [-1.36385697,  1.08768775],
       [-1.15731421, -0.67281411],
       [-1.41285223,  0.72616832],
       [-1.26116455,  1.0807142 ],
       [-0.01037196, -1.78490712],
       [-1.20396896,  0.5540786 ]]), np.array([-1,  1,  1, -1,  1,  1,  1]), 2, 5), (np.array([[-1.27599669,  0.83473676],
       [ 0.71524899,  0.94828181],
       [-1.44876697,  0.79743398],
       [ 0.5275475 ,  0.50570868],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.23188415, -0.68323095],
       [ 0.1109394 , -1.69829392]]), np.array([ 1, -1,  1, -1, -1, -1, -1,  1]), 3, 4), (np.array([[-1.27599669,  0.83473676],
       [ 0.834732  ,  0.40096667],
       [-1.44876697,  0.79743398],
       [-1.41285223,  0.72616832],
       [ 0.1109394 , -1.69829392]]), np.array([ 1, -1,  1, -1,  1]), 3, 5), (np.array([[ 0.834732  ,  0.40096667],
       [ 0.71524899,  0.94828181],
       [ 0.5275475 ,  0.50570868],
       [-1.41285223,  0.72616832],
       [-0.00422831, -2.0688571 ],
       [ 0.59346072,  0.58952085],
       [-1.23188415, -0.68323095]]), np.array([-1,  1,  1, -1,  1,  1,  1]), 4, 5)]
    
    actual = one_vs_one(X, y)

    for i in range(len(correct)):
        assert_ndarray_equal(actual=actual[i][0], correct=correct[i][0],  err_msg="Test 3 Failed")
        assert_ndarray_equal(actual=actual[i][1], correct=correct[i][1],  err_msg="Test 3 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][2]), correct=np.array(correct[i][2]),  err_msg="Test 3 Failed")
        assert_ndarray_equal(actual=np.array(actual[i][3]), correct=np.array(correct[i][3]),  err_msg="Test 3 Failed")
